<!DOCTYPE html>
<html>
<head>
<title>Cryptography in C++</title>
</head>
<body>
<h1>Cryptography in C++</h1>
<p>Last updated August 16, 2021.<br>
Copyright &copy; Eric Chauvin 2021.</p>
<br>

<p><a href="https://github.com/EricInArizona/Cryptography">
See the C++ source code.</a>
</p>

<p>In cryptography large integers are fundamental,
 so you should start with the Base10Number.cpp,
 Integer.cpp, and IntegerMath.cpp files, in that
 order, first.
</p>

<p>Look at MainApp.cpp to see what is current.
 It has the mainLoop() function and you can follow
 it from there.  The main() function in main.cpp
 just creates and runs the MainApp.cpp object.
 Everything except the main() function is
 written with C++ objects, not in C.
</p>

<p>GitHub sorts files in ASCII order.  So lower
 case letters come after all upper case letters.
 The file main.cpp, which starts with a lower
 case letter is at the very bottom because
 pretty much all other files start with upper
 case letters.  And RSA.h sorts above the
 RandomCrypto.h file because of the capital S
 in RSA.
</p>

<p>Notice that I don't pollute code with macro
 definitions.  I don't use the preprocessor at
 all except for (#pragma once) and #include
 statements.  In places where I have to #include
 standard files that have macros defined, like
 in the FileIO.cpp file, where iostream is
 included, I only do that in a cpp file, and
 never in a header file.  That way the pollution
 from macros only stays in that one translation
 unit.  And I know I can use all of my own
 header files knowing that no macros are
 defined in them.  In some places, like the
 Integer.h file, you'll see inline functions
 like setToZero().  In a modern compiler, with
 inline functions, the idea that macros make
 for more efficient code is obsolete.
</p>

<p>Now days software controls autonomous cars,
 airplanes, all kinds of finance, medical
 devices, compilers, and all kinds of things,
 so that reliability is <i><b>always</b></i> more
 important than speed.  Even if you are trying to
 break speed records for how fast you can factor
 large integers, you want to do it reliably and
 correctly.  So get rid of the macros.
</p>


<p><a href="https://ericinarizona.github.io/">
 Main Page</a>
<br><br>
</p>

</body>
</html>
